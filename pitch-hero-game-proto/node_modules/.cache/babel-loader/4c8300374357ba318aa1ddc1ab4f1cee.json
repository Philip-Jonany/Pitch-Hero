{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\phili\\\\Documents\\\\GitHub\\\\Pitch-Hero\\\\pitch-hero-game-proto\\\\src\\\\GameApp.tsx\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport \"./Game.css\";\nimport Game from \"./Game\";\nimport { GamePhase } from './GameTypes';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction GameApp(props) {\n  _s();\n\n  const [canvasWidth, setCanvasWidth] = useState(window.innerWidth * 0.8);\n  const [canvasHeight, setCanvasHeight] = useState(250);\n  const [gameInput, setGameInput] = useState(50);\n  const [currentPhase, setCurrentPhase] = useState(GamePhase.INIT);\n  const [pauseInfo, setPauseInfo] = useState({\n    paused: false,\n    previous: GamePhase.INIT\n  });\n  const [requestedPhase, setRequestedPhase] = useState(null);\n\n  const onInputChanged = e => {\n    setGameInput(parseInt(e.target.value));\n  };\n\n  const onPhaseChanged = (lastPhase, newPhase, info) => {\n    var _props$onInit, _props$onDeath;\n\n    console.log(`Transitioned from ${lastPhase} to ${newPhase}`);\n\n    if (newPhase === requestedPhase) {\n      // our request has been answered\n      setRequestedPhase(null);\n    }\n\n    setCurrentPhase(newPhase);\n\n    switch (newPhase) {\n      case GamePhase.INIT:\n        (_props$onInit = props.onInit) === null || _props$onInit === void 0 ? void 0 : _props$onInit.call(props);\n        break;\n\n      case GamePhase.ALIVE:\n        break;\n\n      case GamePhase.DEAD:\n        // alert(`Player died! Passed ${info.score} pipes before dying!`)\n        (_props$onDeath = props.onDeath) === null || _props$onDeath === void 0 ? void 0 : _props$onDeath.call(props, info);\n        break;\n\n      case GamePhase.PAUSED:\n        break;\n    }\n  };\n\n  const onResetClicked = () => {\n    setRequestedPhase(GamePhase.INIT);\n  };\n\n  const onPauseClicked = () => {\n    if (currentPhase !== GamePhase.PAUSED) {\n      setRequestedPhase(GamePhase.PAUSED);\n    } else {\n      setRequestedPhase(GamePhase.UNPAUSED);\n    }\n  };\n\n  useEffect(() => {\n    const handleResize = () => {\n      setCanvasHeight(250);\n      setCanvasWidth(window.innerWidth * 0.8);\n    };\n\n    window.addEventListener('resize', handleResize);\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Game-App\",\n    children: [/*#__PURE__*/_jsxDEV(Game, {\n      width: canvasWidth,\n      height: canvasHeight,\n      input: gameInput,\n      requestedPhase: requestedPhase,\n      onPhaseChangeCallback: onPhaseChanged\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"number\",\n      min: 0,\n      max: 100,\n      value: gameInput,\n      onChange: onInputChanged\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: onResetClicked,\n      children: \"Reset game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: onPauseClicked,\n      children: [\" \", currentPhase === GamePhase.PAUSED ? \"Unpause\" : \"Pause\", \" game\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 5\n  }, this);\n}\n\n_s(GameApp, \"P6xxMv70CDQWN6bBNaWaBMTDfTk=\");\n\n_c = GameApp;\nexport default GameApp;\n\nvar _c;\n\n$RefreshReg$(_c, \"GameApp\");","map":{"version":3,"sources":["C:/Users/phili/Documents/GitHub/Pitch-Hero/pitch-hero-game-proto/src/GameApp.tsx"],"names":["useEffect","useState","Game","GamePhase","GameApp","props","canvasWidth","setCanvasWidth","window","innerWidth","canvasHeight","setCanvasHeight","gameInput","setGameInput","currentPhase","setCurrentPhase","INIT","pauseInfo","setPauseInfo","paused","previous","requestedPhase","setRequestedPhase","onInputChanged","e","parseInt","target","value","onPhaseChanged","lastPhase","newPhase","info","console","log","onInit","ALIVE","DEAD","onDeath","PAUSED","onResetClicked","onPauseClicked","UNPAUSED","handleResize","addEventListener"],"mappings":"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","sourcesContent":["import { useEffect, useState } from 'react';\r\nimport \"./Game.css\";\r\nimport Game from \"./Game\";\r\nimport { GameInfo, GamePhase } from './GameTypes';\r\n\r\ninterface GameAppProps {\r\n  onInit?(): void,\r\n  onDeath?(info: GameInfo): void\r\n}\r\n\r\nfunction GameApp(props: GameAppProps) {\r\n  const [canvasWidth, setCanvasWidth] = useState(window.innerWidth * 0.8);\r\n  const [canvasHeight, setCanvasHeight] = useState(250);\r\n  const [gameInput, setGameInput] = useState(50);\r\n\r\n  const [currentPhase, setCurrentPhase] = useState(GamePhase.INIT);\r\n  const [pauseInfo, setPauseInfo] = useState<{paused: boolean, previous: GamePhase}>({ paused: false, previous: GamePhase.INIT});\r\n  const [requestedPhase, setRequestedPhase] = useState<GamePhase | null>(null);\r\n\r\n  const onInputChanged = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    setGameInput(parseInt(e.target.value));\r\n  }\r\n\r\n  const onPhaseChanged = (lastPhase: GamePhase, newPhase: GamePhase, info: GameInfo) => {\r\n    console.log(`Transitioned from ${lastPhase} to ${newPhase}`);\r\n    \r\n    if (newPhase === requestedPhase) {\r\n      // our request has been answered\r\n      setRequestedPhase(null);\r\n    }\r\n\r\n    setCurrentPhase(newPhase);\r\n\r\n    switch (newPhase) {\r\n      case GamePhase.INIT:\r\n        props.onInit?.();\r\n        break;\r\n      case GamePhase.ALIVE:\r\n        break;\r\n      case GamePhase.DEAD:\r\n        // alert(`Player died! Passed ${info.score} pipes before dying!`)\r\n        props.onDeath?.(info);\r\n        break;\r\n      case GamePhase.PAUSED:\r\n        break;\r\n    }\r\n  }\r\n\r\n  const onResetClicked = () => {\r\n    setRequestedPhase(GamePhase.INIT);\r\n  }\r\n\r\n  const onPauseClicked = () => {\r\n    if (currentPhase !== GamePhase.PAUSED) {\r\n      setRequestedPhase(GamePhase.PAUSED);\r\n    } else {\r\n      setRequestedPhase(GamePhase.UNPAUSED);\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    const handleResize = () => {\r\n      setCanvasHeight(250);\r\n      setCanvasWidth(window.innerWidth * 0.8);\r\n    }\r\n\r\n    window.addEventListener('resize', handleResize);\r\n  });\r\n\r\n  return (\r\n    <div className=\"Game-App\">\r\n      <Game \r\n        width={ canvasWidth }\r\n        height={ canvasHeight }\r\n        input={ gameInput }\r\n        requestedPhase={ requestedPhase }\r\n        onPhaseChangeCallback={ onPhaseChanged }\r\n      />\r\n      <input type=\"number\" min={ 0 } max={ 100 } value={ gameInput } onChange={ onInputChanged }/>\r\n      <button onClick={ onResetClicked }>Reset game</button>\r\n      <button onClick={ onPauseClicked }> {currentPhase === GamePhase.PAUSED? \"Unpause\" : \"Pause\"} game</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default GameApp;\r\n"]},"metadata":{},"sourceType":"module"}